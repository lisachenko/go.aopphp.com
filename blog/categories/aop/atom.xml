<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aop | Go! Aspect-Oriented Framework]]></title>
  <link href="http://go.aopphp.com/blog/categories/aop/atom.xml" rel="self"/>
  <link href="http://go.aopphp.com/"/>
  <updated>2014-05-24T16:33:04+04:00</updated>
  <id>http://go.aopphp.com/</id>
  <author>
    <name><![CDATA[Lisachenko Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is new in version 0.5.0]]></title>
    <link href="http://go.aopphp.com/blog/2014/05/24/what-is-new-in-version-0-dot-5-dot-0/"/>
    <updated>2014-05-24T21:26:00+04:00</updated>
    <id>http://go.aopphp.com/blog/2014/05/24/what-is-new-in-version-0-dot-5-dot-0</id>
    <content type="html"><![CDATA[<p>New versions of frameworks are always exciting because they provide more features and can contain important fixes and changes. Go! AOP evolves too, so I prepared this article for users to underline most important changes.</p>

<!-- more -->


<p></p>

<h3>Support for custom streams and read-only file systems</h3>

<p><a href="https://github.com/lisachenko/go-aop-php/pull/118">lisachenko/go-aop-php#118</a></p>

<p>This feature is one of the most interesting, because it allows to use framework with any stream filters and wrappers, for example with phar archives. It is possible to generate an AOP cache and put it into the phar archive as a standalone read-only application. Possible usages of aspects in the phar archives are logging, dry-run control and much more. Do you bored with implementation of dry-run option for each command? Just give a try for AOP and define an aspect for that!</p>

<h3>Direct advisors</h3>

<p><a href="https://github.com/lisachenko/go-aop-php/pull/142">lisachenko/go-aop-php#142</a></p>

<p>I received a lot of complains about usage of annotations for defining advices instead of pure PHP code. So I decided to give an alternative way for defining advisors with closures:</p>

<p>```php</p>

<pre><code>protected function configureAop(AspectContainer $container)
{
    $container-&gt;registerAdvisor(
        new DefaultPointcutAdvisor(
            new TrueMethodPointcut(),
            new MethodBeforeInterceptor(function (MethodInvocation $invocation) {
                echo "Hello", $invocation-&gt;getMethod()-&gt;name;
            })
        ),
        'test'
    );
}
</code></pre>

<p><code>``
This patch also optimizes injection of advices (interceptors) into the concrete class, so no more slow</code>serialize()/unserialize()<code>functions, they were replaced by</code>var_export()` and direct injection. I&rsquo;m also thinking about DSL builders for defining pointcuts in a more natural way:</p>

<p>```php</p>

<pre><code>protected function configureAop(AspectContainer $container)
{
    $builder = new PointcutBuilder($container);
    $builder-&gt;before('execution(public **-&gt;get(*)')-&gt;do(function (MethodInvocation $invocation) {
        echo "Hello", $invocation-&gt;getMethod()-&gt;name;
    });
}
</code></pre>

<p>```
But this is not included into the current version, please ping me on github if your want it for the next version.</p>

<h3>Annotation class filter</h3>

<p><a href="https://github.com/lisachenko/go-aop-php/pull/129">lisachenko/go-aop-php#128</a></p>

<p>PhpDeal Desing by Contract frameworks requires matching of classes based on presence of annotation in the class docblock. This functionality was missed in the framework. Now it&rsquo;s possible to use special <code>@within(AnnotationClassName)</code> syntax to match classes that have <code>AnnotationClassName</code> annotation.</p>

<p>Here is an example of pointcut that intercepts execution of all public methods in the class marked with <code>Invariant</code> annotation:</p>

<p>```php</p>

<pre><code>/**
 * Verifies invariants for contract class
 *
 * @Around("@within(PhpDeal\Annotation\Invariant) &amp;&amp; execution(public **-&gt;*(*))")
 * @param MethodInvocation $invocation
 *
 * @throws ContractViolation
 * @return mixed
 */
public function invariantContract(MethodInvocation $invocation) {...}
</code></pre>

<p>```</p>

<h3>Access to a doctrine annotations from the MethodInvocation class</h3>

<p><a href="https://github.com/lisachenko/go-aop-php/issues/66">lisachenko/go-aop-php#66</a></p>

<p>Some aspects can analyze annotation to perform additional steps. Consider the following class where we define a ttl in the annotation for a method:</p>

<p>```php
use Demo\Annotation\Cacheable;</p>

<p>class General
{</p>

<pre><code>/**
 * Test cacheable by annotation
 *
 * @Cacheable(time=10)
 * @param float $timeToSleep Amount of time to sleep
 *
 * @return string
 */
public function cacheMe($timeToSleep)
{
    usleep($timeToSleep * 1e6);
    return 'Yeah';
}
</code></pre>

<p>}
```</p>

<p>We can easily define a pointcut and advice that will intercept the execution of methods marked with <code>Cacheable</code> annotation and cache their results in the cache for a specified time. Should be cool, isn&rsquo;t it? Let&rsquo;s do this:</p>

<p>```php
use Demo\Annotation\Cacheable;
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\Around;</p>

<p>class CacheAspect implements Aspect
{</p>

<pre><code>/**
 * Cacheable methods
 *
 * @param MethodInvocation $invocation Invocation
 *
 * @Around("@annotation(Demo\Annotation\Cacheable)")
 */
public function aroundCacheable(MethodInvocation $invocation)
{
    /** @var Cacheable $cacheable */
    $cacheable = $invocation-&gt;getMethod()-&gt;getAnnotation(Cacheable::class);
    echo $cacheable-&gt;time; // TTL for the cache
    return $invocation-&gt;proceed();
}
</code></pre>

<p>}
```</p>

<h3>Simplified pointcut syntax for methods in the same class</h3>

<p><a href="https://github.com/lisachenko/go-aop-php/issues/113">lisachenko/go-aop-php#113</a></p>

<p>Instead of complex pointcut like this:
<code>
execution(public **\*Controller-&gt;create(*) )
|| execution(public **\*Controller-&gt;get(*) )
|| execution(public **\*Controller-&gt;update(*) )
|| execution(public **\*Controller-&gt;delete(*) )
</code></p>

<p>it is possible to use or'ed constructions with <code>|</code> sign:
<code>
execution(public **\*Controller-&gt;create|get|update|delete(*))
</code>
Much cleaner and more readable!</p>

<h3>Inheritance analysis during load-time</h3>

<p><a href="https://github.com/lisachenko/go-aop-php/issues/131">lisachenko/go-aop-php#131</a></p>

<p>It is not a secret, that framework performs load-time weaving of aspects during loading the source file into PHP. Before PHP will be able to parse it and load, Go! AOP scans tokens and builds reflection to analyze a pointcuts. At that moment of class loading there is no information about full inheritance of class (interfaces, abstract classes, traits). This was known limitation of framework that it wasn&rsquo;t possible to match parent methods in the children class:</p>

<p>```php
class Greeting
{</p>

<pre><code>public hello($name)
{
    echo "hello $name";
}
</code></pre>

<p>}</p>

<p>class Example extends Greeting
{
}</p>

<p>// pointcut is @Before(&ldquo;execution(public Example-><em>(</em>))&rdquo;)</p>

<p>$e = new Example();
$e->hello(&ldquo;User&rdquo;); // advice is not applied, because method is defined in the Greeting class
```</p>

<p>After some research I found a way to recursively load parent classes and scan tokens. This is the major change for a dessert, but it can have an impact on the current aspects that uses <code>within</code> or similar pointcuts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspect-Oriented programming with Yii]]></title>
    <link href="http://go.aopphp.com/blog/2013/09/28/aspect-oriented-programming-with-yii/"/>
    <updated>2013-09-28T16:28:00+04:00</updated>
    <id>http://go.aopphp.com/blog/2013/09/28/aspect-oriented-programming-with-yii</id>
    <content type="html"><![CDATA[<p>Aspect-Oriented programming becomes more popular for PHP, but it requires good knowledge of OOP and can be very cumbersome for beginners. So it&rsquo;s important to have a working examples and manuals to have a possibility to run it locally with favorite framework. Go! AOP provides all the necessary functionality for configuration of AOP into any frameworks, but integration process can be very tricky, so configuration is not so easy. In this article we will configure a working example for Yii framework.</p>

<!-- more -->


<p>Let&rsquo;s start! First of all, we need an empty <code>yii-aspect</code> directory for our project:</p>

<p><code>bash
mkdir yii-aspect &amp;&amp; cd yii-aspect
</code></p>

<p>Next step is to install dependencies: Yii and Go! AOP frameworks. Go! AOP is registered on packagist and can be easily installed with composer:
<code>bash
composer require lisachenko/go-aop-php:0.4.*
</code>
Latest version of Yii framework (1.1.14) is on <a href="https://packagist.org/packages/yiisoft/yii">packagist</a> too! This means that we can install it without any hacks with local repositories:
<code>bash
composer require yiisoft/yii:1.1.*
</code></p>

<p>This is a minimum list of dependencies for our first example. Following step is very easy, thanks to the <code>yiic</code> console command. By default, all binaries are installed into <code>./vendor/bin</code> folder, so <code>yiic</code> console should be there too.</p>

<p>Let&rsquo;s create a web application:
<code>bash
yiic webapp app
</code>
Yii will generate a directory <code>app</code> with default project structure and files. This project can be opened in the browser, but AOP isn&rsquo;t enabled right now. To enable AOP we should prepare our application to have an ability to use it. To enable AOP we need to update the front controller of our application (<code>./app/index.php</code>) in the following way:</p>

<p>Add this lines to the top of file before original content:
```php
&lt;?php
use Go\Instrument\Transformer\FilterInjectorTransformer;</p>

<p>// Load the composer autoloader
include <strong>DIR</strong> . &lsquo;/../vendor/autoload.php&rsquo;;</p>

<p>// Load AOP kernel
include <strong>DIR</strong> . &lsquo;/aspect.php&rsquo;;
```</p>

<p>And replace initialization of Yii at the bottom of file from <code>require_once($yii)</code> to <code>require_once(FilterInjectorTransformer::rewrite($yii))</code>. This is needed to give a hook for the Go! AOP framework to weave aspects into classes. Aspects are defined as separated classes and included in the <code>./aspect.php</code> file. Let&rsquo;s move to it and to the aspect kernel</p>

<p>```php</p>

<p>include <strong>DIR</strong> . &lsquo;/protected/extensions/go-aop-php/ApplicationAspectKernel.php&rsquo;;</p>

<p>// Prevent an error about nesting level
ini_set(&lsquo;xdebug.max_nesting_level&rsquo;, 500);</p>

<p>// Initialize an application aspect container
$applicationAspectKernel = ApplicationAspectKernel::getInstance();
$applicationAspectKernel->init(array(</p>

<pre><code>'debug' =&gt; true,
// Application root directory
'appDir'   =&gt; __DIR__ . '/../',
// Cache directory
'cacheDir' =&gt; __DIR__ . './protected/aspect',
'excludePaths' =&gt; array(
    __DIR__ . './protected/aspect'
)
</code></pre>

<p>));
```</p>

<p>This is typical configuration of Go! AOP framework where we can adjust some directories and paths. I think that this config is pretty clear to understand. Only <code>debug</code> parameter is really important. For production mode it should be <code>false</code>, but for development mode it should be enabled to enable better debugging and cache refreshing.</p>

<p>In this file we also include a strange file <code>ApplicationAspectKernel.php</code>. This file contains definition of aspect kernel for our application and it&rsquo;s very simple:</p>

<p>```php</p>

<p>use Go\Core\AspectKernel;
use Go\Core\AspectContainer;</p>

<p>/<em>*
 * Application Aspect Kernel
 </em>/
class ApplicationAspectKernel extends AspectKernel
{</p>

<pre><code>/**
 * Configure an AspectContainer with advisors, aspects and pointcuts
 *
 * @param AspectContainer $container
 *
 * @return void
 */
protected function configureAop(AspectContainer $container)
{
    // todo: register aspects, advisors, pointcuts, etc
}
</code></pre>

<p>}
```</p>

<p>There is only one method to define: <code>configureAop</code> that is used for AOP configuration. We can create an aspect now and register it in the kernel:</p>

<p>```php
&lt;?php
// app/protected/extensions/go-aop-php/TestMonitorAspect.php</p>

<p>namespace Aspect;</p>

<p>use Go\Aop\Aspect;
use Go\Aop\Intercept\FieldAccess;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;
use Go\Lang\Annotation\Pointcut;</p>

<p>/<em>*
 * Monitor aspect
 </em>/
class TestMonitorAspect implements Aspect
{</p>

<pre><code>/**
 * Method that will be called before real method
 *
 * @param MethodInvocation $invocation Invocation
 * @Before("within(**)")
 */
public function beforeMethodExecution(MethodInvocation $invocation)
{
    $obj = $invocation-&gt;getThis();
    echo 'Calling Before Interceptor for method: ',
    is_object($obj) ? get_class($obj) : $obj,
    $invocation-&gt;getMethod()-&gt;isStatic() ? '::' : '-&gt;',
    $invocation-&gt;getMethod()-&gt;getName(),
    '()',
    ' with arguments: ',
    json_encode($invocation-&gt;getArguments()),
    "&lt;br&gt;\n";
}
</code></pre>

<p>}
```
&hellip; and registration in the kernel:</p>

<p>```php
&lt;?php
// app/protected/extensions/go-aop-php/ApplicationAspectKernel.php</p>

<p>require_once &lsquo;TestMonitorAspect.php&rsquo;;</p>

<p>use Aspect\TestMonitorAspect;
use Go\Core\AspectKernel;
use Go\Core\AspectContainer;</p>

<p>/<em>*
 * Application Aspect Kernel
 </em>/
class ApplicationAspectKernel extends AspectKernel
{</p>

<pre><code>/**
 * Configure an AspectContainer with advisors, aspects and pointcuts
 *
 * @param AspectContainer $container
 *
 * @return void
 */
protected function configureAop(AspectContainer $container)
{
    $container-&gt;registerAspect(new TestMonitorAspect());
}
</code></pre>

<p>}
```</p>

<p>That&rsquo;s all )</p>

<blockquote class="twitter-tweet" data-conversation="none"><p>Just have recreated <a href="https://t.co/FqlECETHO7">https://t.co/FqlECETHO7</a> to use latest <a href="https://twitter.com/search?q=%23yii&amp;src=hash">#yii</a> 1.1.x and Go! AOP with <a href="https://twitter.com/search?q=%23composer&amp;src=hash">#composer</a> /cc <a href="https://twitter.com/afdiaz">@afdiaz</a> <a href="https://twitter.com/sam_dark">@sam_dark</a></p>&mdash; Alexander Lisachenko (@lisachenko) <a href="https://twitter.com/lisachenko/statuses/383317369872855040">September 26, 2013</a></blockquote>


<p>Just refresh the page in the browser to see a result. All methods will be intercepted by our advice <code>beforeMethodExecution</code>:</p>

<p><img src="/images/yii-aop.png" title="&lsquo;Yii with Go! AOP framework&rsquo; &lsquo;Yii methods interception&rsquo;" ></p>

<p>PS. If you want to create an empty project with single line you can run:</p>

<p><code>bash
composer create-project lisachenko/yii-aspect --prefer-source --stability=dev
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intercepting execution of system functions in PHP]]></title>
    <link href="http://go.aopphp.com/blog/2013/08/24/intercepting-execution-of-system-functions-in-php/"/>
    <updated>2013-08-24T17:00:00+04:00</updated>
    <id>http://go.aopphp.com/blog/2013/08/24/intercepting-execution-of-system-functions-in-php</id>
    <content type="html"><![CDATA[<p>Intercepting an execution of methods is one of the most common tasks for AOP. In the Java world there are a lot of articles that has a detailed examples for transactional control, logging, authorization, etc. But all AOP stuff in Java is related only to the classes and objects, because functions are not first-class citizens in Java whereas PHP has a good support for functions. By using some tricks we can create a proxies for system functions and add our own interceptors with custom logic. This article will show you how to use AOP techniques with functions in PHP.</p>

<!-- more -->


<p>Ok, let&rsquo;s have some experiments with PHP. Suppose, that we have a nice code that uses the <code>file_get_contents()</code> function to load the content of a file and then prints it to the screen:</p>

<p>```php
namespace Test;</p>

<p>class FilePrinter
{</p>

<pre><code>public function show($filename)
{
    echo '&lt;pre&gt;', htmlspecialchars(file_get_contents($filename)), '&lt;/pre&gt;';
}
</code></pre>

<p>}
```</p>

<p>Is it possible to test this class and method? Of course, yes! We can create a unit test that will generate a temporary file and then just check that content is correct:</p>

<p>```php
namespace Test;</p>

<p>use PHPUnit_Framework_TestCase as TestCase;</p>

<p>class FilePrinterTest extends TestCase
{</p>

<pre><code>protected $printer;

public function setUp()
{
    $this-&gt;printer = new FilePrinter();
}

public function testShow()
{
    $file = tempnam("/tmp", "PHP");
    file_put_contents($file, 'test');
    ob_start();
    $this-&gt;printer-&gt;show($file);
    $content = ob_end_clean();
    $this-&gt;assertEqual('test', $content);
    unlink($file);
}
</code></pre>

<p>}
<code>``
Not so cool to use a real filesystem. Real programmers should use [virtual file system](https://github.com/mikey179/vfsStream/wiki)! But is it possible to intercept system functions like</code>file_get_contents()` in PHP?</p>

<p>I can suppose that most of programmers will argue that it&rsquo;s impossible to intercept system function without extensions such as <a href="https://github.com/mikey179/vfsStream/wiki">runkit</a>. Yes, it&rsquo;s absolutely true that we can not change the function that already loaded into the memory of PHP. However there is a small loophole in the PHP that can be exploited for free.</p>

<h3>Namespace magic</h3>

<p>All modern code is using namespaces to organize the better structure, to encapsulate a classes into a group and to avoid name collisions for functions, classes and constants. There are special <a href="http://php.net/manual/en/language.namespaces.rules.php">namespace resolution rules</a> that are used for resolving relative names to fully-qualified names. Let&rsquo;s have a careful look to the rule number 5:</p>

<p><blockquote><p>Inside namespace (say A\B), calls to unqualified functions are resolved at run-time. Here is how a call to function foo() is resolved:<br/>1. It looks for a function from the current namespace: A\B\foo().<br/>2. It tries to find and call the global function foo().</p></blockquote></p>

<p>Wow! Inside namespace calls to unqualified functions are resolved at run-time! This means that we can create a function with the same name as system function in a namespace and it will be used instead of system one. Let&rsquo;s check this fact:</p>

<p>```php
namespace Test;</p>

<p>use PHPUnit_Framework_TestCase as TestCase;</p>

<p>function file_get_contents($filename) {</p>

<pre><code>return 'Wow!';
</code></pre>

<p>}</p>

<p>class FilePrinterTest extends TestCase
{</p>

<pre><code>protected $printer;

public function setUp()
{
    $this-&gt;printer = new FilePrinter();
}

public function testShow()
{
    $file = tempnam("/tmp", "PHP");
    file_put_contents($file, 'test');
    ob_start();
    $this-&gt;printer-&gt;show($file);
    $content = ob_end_clean();
    $this-&gt;assertEqual('test', $content);
    unlink($file);
}
</code></pre>

<p>}
```</p>

<p>Pay an attention that we define the function <code>file_get_contents()</code> in the namespace <code>Test</code>. If we run our test we will see that it is broken, because we expecting &lsquo;test&rsquo; but got &lsquo;Wow!&rsquo;. Very promising ) Small demo is also available at <a href="http://3v4l.org/K1b9k">http://3v4l.org/K1b9k</a></p>

<p>Moreover, if we need to call an original function we can easily do this by using qualified name:</p>

<p>```php
namespace Test;</p>

<p>function file_get_contents($filename) {</p>

<pre><code>echo 'Wow!';
return \file_get_contents($filename);
</code></pre>

<p>}
```</p>

<h3>Aspect-oriented programming with functions</h3>

<p>Go! AOP framework has an experimental support for system function interception from the version 0.4.0. This means that there is an ability to create an advice for system functions!</p>

<p>Function interception can be very-very slow, so please do not try to intercept all system functions in all namespaces. However it&rsquo;s so amazing. Let&rsquo;s try:</p>

<ul>
<li>Enable function interception in the kernel by setting &lsquo;interceptFunctions&rsquo; => true for the kernel.</li>
<li>Create an advice within aspect to intercept functions:
```php
use Go\Aop\Aspect;
use Go\Aop\Intercept\FunctionInvocation;
use Go\Lang\Annotation\Around;</li>
</ul>


<p>/<em>*
 * Function interceptor aspect
 </em>/
class FunctionInterceptorAspect implements Aspect
{</p>

<pre><code>/**
 * @param FunctionInvocation $invocation
 *
 * @Around("execution(Test\*(*))")
 *
 * @return mixed
 */
public function aroundFunction(FunctionInvocation $invocation)
{
    echo 'Calling Around Interceptor for function: ',
        $invocation-&gt;getFunction()-&gt;getName(),
        '()',
        ' with arguments: ',
        json_encode($invocation-&gt;getArguments()),
        PHP_EOL;

    return $invocation-&gt;proceed();
}
</code></pre>

<p>}
```
* Register this aspect in the kernel</p>

<p>Here we define an advice with an around pointcut <code>execution(Test\*(*))</code>. Pointcut can be translated as &ldquo;around execution of any (*) system functions inside the <code>Test</code> namespace&rdquo;. Body of this method is an advice that will be invoked around the original function. So we have a full control over the return value and original invocation by calling <code>$invocation-&gt;proceed()</code> at the end.
Look at the screenshot from ZF2 framework:</p>

<p><img src="/images/function-aop.png" title="&lsquo;Function interception with Go! AOP framework&rsquo; &lsquo;ZF2 function interception&rsquo;" ></p>

<p>If you want to try this by hand, feel free to install the Go! AOP framework with composer and open the <code>demos/</code> folder in the browser:</p>

<p><code>
composer require lisachenko/go-aop-php:0.4.0
</code></p>

<p>Thank you for attention!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing logging aspect with Doctrine annotations]]></title>
    <link href="http://go.aopphp.com/blog/2013/07/21/implementing-logging-aspect-with-doctrine-annotations/"/>
    <updated>2013-07-21T22:38:00+04:00</updated>
    <id>http://go.aopphp.com/blog/2013/07/21/implementing-logging-aspect-with-doctrine-annotations</id>
    <content type="html"><![CDATA[<p>Logging is probably the most mentioned sweet example of AOP. Probably because it is the simplest and most straightforward example most people can think of. So I want to show you the easiest ever way to implement logging in PHP with annotations. This article is the second part of my previous article about <a href="/blog/2013/06/02/application-level-logging-with-aop-and-monolog/">application-level logging with AOP in PHP</a> and if you haven&rsquo;t read it yet please do this before proceeding to this article.</p>

<!-- more -->


<p>It&rsquo;s not a secret that every business application requires logging of different actions in different places of the code. Why we need this logging? Is it possible not to use it? The answer is obvious. No, we can&rsquo;t, we should write logs to be able to analyze them in case something goes wrong. Logs can give us the answers: what happened, when it happened and why it happened.</p>

<p>Let&rsquo;s have a look at a typical class which is doing some important job for us:</p>

<p>```php
class Account
{</p>

<pre><code>protected $amount = 0;

public function depositMoney($amount)
{
    $this-&gt;amount += $amount;
}

public function withdrawMoney($amount)
{
    $this-&gt;amount -= $amount;
}
</code></pre>

<p>}
```</p>

<p>Of course, it&rsquo;s the simplest implementation and real class can contain much more lines of code. Suppose that we deployed this code to the production server and after a while our project manager says that sometimes deposit withdrawal is not working. Oops!</p>

<p>Best solution in that case is to add logging to all the important methods to be sure that everything is working as expected. To detect an error we should write log before and after method execution. Then we can look into log and just count pairs &ldquo;before-after&rdquo;. If there isn&rsquo;t &ldquo;after&rdquo; log record then we have an error and corresponding &ldquo;before&rdquo; record will give us an idea why we have this error.</p>

<p>To write the logs we need a logger instance in our class and it&rsquo;s another disadvantage of OOP version of logging. Injecting logger adds a dependency which is not really needed by our class:</p>

<p>```php
class Account
{</p>

<pre><code>/**
 * @var LoggerInterface
 */
protected $logger;

public function __construct(LoggerInterface $logger)
{
    $this-&gt;logger = $logger;
}

// source code here
</code></pre>

<p>}
```</p>

<p>Cross-cutting concerns such as logging can not be easily extracting on OOP level into the single class and this means that we should add logging to each method:</p>

<p>```php
class Account
{</p>

<pre><code>protected $amount = 0;

/**
 * @var LoggerInterface
 */
protected $logger;

public function __construct(LoggerInterface $logger)
{
    $this-&gt;logger = $logger;
}

public function depositMoney($amount)
{
    $this-&gt;logger-&gt;info("Preparing to deposit money", array('amount' =&gt; $amount));
    try {
        $this-&gt;amount += $amount;
        $this-&gt;logger-&gt;info("Deposit money successful", array('amount' =&gt; $amount));
    } catch (Exception $e) {
        $this-&gt;logger-&gt;info("Deposit money error: " . $e, array('amount' =&gt; $amount));
        throw $e;
    }
}

public function withdrawMoney($amount)
{
    $this-&gt;logger-&gt;info("Preparing to withdraw money", array('amount' =&gt; $amount));
    try {
        $this-&gt;amount -= $amount;
        $this-&gt;logger-&gt;info("Withdraw money successful", array('amount' =&gt; $amount));
    } catch (Exception $e) {
        $this-&gt;logger-&gt;info("Withdraw money error: " . $e, array('amount' =&gt; $amount));
        throw $e;
    }
}
</code></pre>

<p>}
```
Wow! Logging is so annoying! Instead of single line of useful code we have 6! For each important method! In my previous article we refactored logging to the aspect class:</p>

<p>```php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;</p>

<p>class LoggingAspect implements Aspect
{</p>

<pre><code>/**
 * Instance of logger (injected in constructor or by setter)
 */
protected $logger;

/**
 * @Before("within(**)")
 */
public function beforeMethodExecution(MethodInvocation $invocation)
{
    $this-&gt;logger-&gt;info(
        "Executing " . $invocation-&gt;getMethod()-&gt;name,
        $invocation-&gt;getArguments()
    );
}
</code></pre>

<p>}
```</p>

<p>This aspect is cool but it is too global due to the <code>within(**)</code> pointcut that matches all public and protected methods in every class. But what should we do if we want to log only specific methods in the application? We definitely need some markers for loggable methods. In the Java world we can use native annotations to mark the methods, but for PHP there isn&rsquo;t native support for annotations. However, there is a cool <a href="http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html">Doctrine Annotations</a> library that can be used in our own application to implement doc block annotations.</p>

<p>Let&rsquo;s create an annotation class for @Loggable marker:</p>

<p>```php
namespace Annotation;</p>

<p>use Doctrine\Common\Annotations\Annotation;</p>

<p>/<em>*
 * Loggable marker
 *
 * @Annotation
 </em>/
class Loggable extends Annotation
{</p>

<p>}
```</p>

<p>The next step is to register this annotation in the registry of Doctrine (this is only needed if you did not register an autoloader previously):</p>

<p>```php
use Doctrine\Common\Annotations\AnnotationRegistry;</p>

<p>AnnotationRegistry::registerFile(<strong>DIR</strong> . &lsquo;./Annotation/Loggable.php&rsquo;);
```</p>

<p>Now we can modify an aspect by writing a pointcut expression that will match only specific methods. A pointcut expression is an expression that specifies where in the code the advice will be applied. With Go! AOP, you can create a pointcut by specifying namespace, class and method attributes among other things. But the easiest way to specify a pointcut for the logging aspect is by matching methods that have a specific <code>Annotation\Loggable</code> annotation marker in the phpDoc-block</p>

<p>```php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\Around;
use Go\Lang\Annotation\Pointcut;</p>

<p>class LoggingAspect implements Aspect
{</p>

<pre><code>/**
 * Instance of logger (injected in constructor or by setter)
 */
protected $logger;

/**
 * @Pointcut("@annotation(Annotation\Loggable)")
 */
protected function loggablePointcut() {}

/**
 * @Around("$this-&gt;loggablePointcut")
 * @return mixed
 */
public function aroundLoggable(MethodInvocation $invocation)
{
    $method = $invocation-&gt;getMethod()-&gt;name;
    $this-&gt;logger-&gt;info("Entering " . $method, $invocation-&gt;getArguments());
    try {
        $result = $invocation-&gt;proceed();
        $this-&gt;logger-&gt;info("Success: " . $method);
    } catch (Exception $e) {
        $this-&gt;logger-&gt;error("Error: " . $method . ' details: ' . $e);
        throw $e;
    }
    return $result;
}
</code></pre>

<p>}
```
Using the annotation means that developers never need to alter the pointcut expression to add or remove methods to the pointcut. A developer only has to add the annotation to a method to have the logging aspect applied. Let&rsquo;s refactor our original class to use only annotation for loggable methods:</p>

<p>```php</p>

<p>use Annotation\Loggable;</p>

<p>class Account
{</p>

<pre><code>protected $amount = 0;

/**
 * @var LoggerInterface
 */
protected $logger;

public function __construct(LoggerInterface $logger)
{
    $this-&gt;logger = $logger;
}

/**
 * @Loggable
 */
public function depositMoney($amount)
{
    $this-&gt;amount += $amount;
}

/**
 * @Loggable
 */
public function withdrawMoney($amount)
{
    $this-&gt;amount -= $amount;
}
</code></pre>

<p>}
```</p>

<p>We can also remove logger dependency, as there is no need in it any more:</p>

<p>```php</p>

<p>use Annotation\Loggable;</p>

<p>class Account
{</p>

<pre><code>protected $amount = 0;

/**
 * @Loggable
 */
public function depositMoney($amount)
{
    $this-&gt;amount += $amount;
}

/**
 * @Loggable
 */
public function withdrawMoney($amount)
{
    $this-&gt;amount -= $amount;
}
</code></pre>

<p>}
```</p>

<p>We just finished our refactoring to use transparent logging with Go! AOP and Doctrine annotations. By having <code>@Loggable</code> marker we still have a good understanding that this method should be logged and have a nice aspect that do logging in one place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Application-level logging with AOP and Monolog]]></title>
    <link href="http://go.aopphp.com/blog/2013/06/02/application-level-logging-with-aop-and-monolog/"/>
    <updated>2013-06-02T13:50:00+04:00</updated>
    <id>http://go.aopphp.com/blog/2013/06/02/application-level-logging-with-aop-and-monolog</id>
    <content type="html"><![CDATA[<p>So you got finished with your brand new website. It is completely PHP driven and looks very nice. But are you sure that
everything works perfectly? Under every circumstances?</p>

<p>No. You can never be absolutely sure. That is why you need a log file to see if there where some errors. Well, if you
are the kind of person that doesn’t care if some jerks who behaved wrong on you website get error messages, then you
probably don’t need an error log file.</p>

<!-- more -->


<p>If you decide to to write the logs, then you definitely choose the best tool for this &ndash; <a href="https://github.com/Seldaek/monolog">Monolog</a>.
Monolog is used by such frameworks as Symfony2, Silex, Laravel4, PPI and can be easily integrated into custom application.</p>

<p>But even such a great tool like Monolog can not help us with encapsulating the logging into separate class, because
logging is a <a href="http://en.wikipedia.org/wiki/Cross-cutting_concern">cross-cutting concern</a>. This means that logging do not
fit cleanly into object-oriented programming. As a result, the code addressing the logging must be scattered, or duplicated,
across the various related locations, resulting in a loss of modularity.</p>

<p>Aspect-oriented programming aims to encapsulate cross-cutting concerns into aspects to retain modularity.
This allows for the clean isolation and reuse of code addressing the cross-cutting concern. By basing designs on
cross-cutting concerns, software engineering benefits are effected, including modularity and simplified maintenance.
This article will show you how to combine the power of AOP with the ease of use of Monolog to implement application-level
 logging just in few lines.</p>

<h3>Installation</h3>

<p>First of all, we need to install Monolog (if it isn&rsquo;t available). Monolog is available on Packagist (monolog/monolog)
and as such installable via Composer:</p>

<p><code>bash
$ composer require monolog/monolog
</code></p>

<p>If you do not use Composer, you can grab the code of Monolog from GitHub, and use any PSR-0 compatible autoloader
(e.g. the Symfony2 ClassLoader component) to load Monolog classes.</p>

<p>Next tool that we need is <a href="http://go.aopphp.com">Go! Aspect-Oriented Framework</a>. You can find more information about installation
and configuration in the <a href="/docs/">documentation</a> section.</p>

<p>If you use a Composer, then installation is quite easy:</p>

<p><code>bash
$ composer require lisachenko/go-aop-php
</code></p>

<p>Small configuration is required to prepare the AOP kernel for work. Detailed instructions are
available <a href="/docs/initial-configuration/">here</a>. After installation and configuration we are ready for the dark power of
AOP</p>

<h3>Implementing logging aspect</h3>

<p>So, what is aspect?</p>

<p><blockquote><p>In computer science, an aspect of a program is a feature linked to many other parts of the program, but which is not related to the program&rsquo;s primary function.</p></blockquote></p>

<p>Go! framework defines an aspect as a typical class with methods-advices. Each advice contains a specific logic that can be
invoked before, after or around specific part of code in your application. Let&rsquo;s try to describe an advice for logging.</p>

<p>Suppose, that we want to log an execution of methods. We want to write a method name and an arguments before execution of a method.
Typically this is looking like this:</p>

<p>```php
&lt;?php
class Example
{</p>

<pre><code>/**
 * Instance of logger (injected in constructor or by setter)
 */
protected $logger;
</code></pre>

<p>    public function test($arg1, $arg2)</p>

<pre><code>{
    $this-&gt;logger-&gt;info("Executing " . __METHOD__, func_get_args());
    // ... logic of method here
}

public function anotherTest($arg1)
{
    $this-&gt;logger-&gt;info("Executing " . __METHOD__, func_get_args());
    // ... logic of method here
}
</code></pre>

<p>}
```</p>

<p>We can notice that the code addressing the logging is scattered and duplicated. To solve this issue we can extract this code into the separate &ldquo;before&rdquo; advice:</p>

<p>```php
&lt;?php
use Go\Aop\Aspect;</p>

<p>class LoggingAspect implements Aspect
{</p>

<pre><code>/**
 * Instance of logger (injected in constructor or by setter)
 */
protected $logger;

public function beforeMethodExecution()
{
    $this-&gt;logger-&gt;info("Executing " . __METHOD__, func_get_args());
    // return the control to original code
}
</code></pre>

<p>}
```</p>

<p>Ok, we have extracted the advice itself, but how we get a method name and arguments? Go! framework contains a specific class, that implements <code>MethodInvocation</code> interface. This interface gives an information about joinpoint by providing an access to the reflection object. Each advice is receiving an instance of this class as an argument:</p>

<p>```php
&lt;?php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;</p>

<p>class LoggingAspect implements Aspect
{</p>

<pre><code>/**
 * Instance of logger (injected in constructor or by setter)
 */
protected $logger;

public function beforeMethodExecution(MethodInvocation $invocation)
{
    $this-&gt;logger-&gt;info("Executing " . $invocation-&gt;getMethod()-&gt;name, $invocation-&gt;getArguments());
}
</code></pre>

<p>}
```
There is one more question to solve: &ldquo;how to specify concrete methods?&rdquo;. This is known as a pointcut &ndash; the term given to the point of execution in the application at which cross-cutting concern needs to be applied.</p>

<p>Go! framework uses annotations for defining pointcuts. Pointcut syntax is like an SQL for the source code. To intercept each public and protected method in the class we can use &ldquo;within&rdquo; pointcut:</p>

<p>```php
&lt;?php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;</p>

<p>class LoggingAspect implements Aspect
{</p>

<pre><code>/**
 * Instance of logger (injected in constructor or by setter)
 */
protected $logger;

/**
 * @Before("within(**)")
 */
public function beforeMethodExecution(MethodInvocation $invocation)
{
    $this-&gt;logger-&gt;info("Executing " . $invocation-&gt;getMethod()-&gt;name, $invocation-&gt;getArguments());
}
</code></pre>

<p>}
```</p>

<p>Pointcut syntax allows many constructions, for example: &ldquo;within(My\Super\Class)&rdquo;, &ldquo;execution(public ClassName-><em>(</em>))&rdquo;, &ldquo;@annotation(Annotation\Class\Name)&rdquo; and more. You can play with pointcuts to look at result )</p>

<p>To register the aspect just add an instance of it in the <code>configureAop()</code> method of the kernel:</p>

<p>```php
&lt;?php
// app/ApplicationAspectKernel.php</p>

<p>use LoggingAspect;</p>

<p>//&hellip;</p>

<pre><code>protected function configureAop(AspectContainer $container)
{
    $container-&gt;registerAspect(new LoggingAspect());
}
</code></pre>

<p>//&hellip;
```</p>

<p>If you don&rsquo;t know how to inject a logger, you can try to initialize it in the aspect constructor:</p>

<p>```php
&lt;?php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;</p>

<p>use Monolog;</p>

<p>/<em>*
 * Logging aspect
 </em>/
class LoggingAspect implements Aspect
{</p>

<pre><code>protected $logger;

public function __construct()
{
    $this-&gt;logger = new Monolog\Logger('test');
    $this-&gt;logger-&gt;pushHandler(new Monolog\Handler\StreamHandler('php://output'));
}

/**
 * @Before("within(**)")
 */
public function beforeMethodExecution(MethodInvocation $invocation)
{
    $obj   = $invocation-&gt;getThis();
    $class = $obj === (object)$obj ? get_class($obj) : $obj;
    $this-&gt;logger-&gt;info("Executing " . $class.'-&gt;'.$invocation-&gt;getMethod()-&gt;name, $invocation-&gt;getArguments());
}
</code></pre>

<p>}
```</p>

<p>If you run an application you can get an output like this (example for a Go! <a href="https://github.com/lisachenko/go-aop-php/blob/master/demos/life.php">demo</a>):
<code>
Want to eat something, let's have a breakfast!&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;eat [] []
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;washUp [] []
Washing up...&lt;br&gt;
Eating...&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;cleanTeeth [] []
Cleaning teeth...&lt;br&gt;
I should work to earn some money&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;work [] []
Working...&lt;br&gt;
It was a nice day, go to bed&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;cleanTeeth [] []
Cleaning teeth...&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;sleep [] []
Go to sleep...&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\User-&gt;setName ["test"] []
[2013-06-02 11:50:14] test.INFO: Executing Example\User-&gt;setSurname ["a"] []
[2013-06-02 11:50:14] test.INFO: Executing Example\User-&gt;setPassword ["root"] []
</code></p>

<p>So, we have implemented logging without changes in the original source code! Have a nice experiments!</p>
]]></content>
  </entry>
  
</feed>
