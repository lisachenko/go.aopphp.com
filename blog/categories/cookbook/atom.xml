<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cookbook | Go! Aspect-Oriented Framework]]></title>
  <link href="http://go.aopphp.com/blog/categories/cookbook/atom.xml" rel="self"/>
  <link href="http://go.aopphp.com/"/>
  <updated>2014-12-06T23:46:13+03:00</updated>
  <id>http://go.aopphp.com/</id>
  <author>
    <name><![CDATA[Lisachenko Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Caching like a PRO]]></title>
    <link href="http://go.aopphp.com/blog/2014/10/19/caching-like-a-pro/"/>
    <updated>2014-10-19T20:02:00+03:00</updated>
    <id>http://go.aopphp.com/blog/2014/10/19/caching-like-a-pro</id>
    <content type="html"><![CDATA[<p>As web applications become more large-scaled, the questions of performance optimization are more frequently considered in initial design. One of the optimization techniques used extensively is caching. Cache contains pre-processed data which is ready to be used without redoing the processing. This article shows the possible ways of doing caching in PHP, including aspect-oriented approach.</p>

<p>Caching is probably the most known technique in computer science, it appears everywhere: CPU, disk cache buffers, opcode cache, memcache, SQL cache, etc. Since it is contained everywhere, we can&rsquo;t extract it into a single place to keep it under our control. So cache invalidation is one of the hardest things. There is a good quote:</p>

<p><blockquote><p>There are only two hard things in Computer Science: cache invalidation and naming things.</p><footer><strong>Phil Karlton</strong></footer></blockquote>
Let&rsquo;s have a look at caching in the PHP.</p>

<!-- more -->


<h3>Caching process</h3>

<p>Ok, what is caching or cache?</p>

<p><blockquote><p>In computing, a cache is a component that transparently stores data so that future requests for that data can be served faster. The data that is stored within a cache might be values that have been computed earlier or duplicates of original values that are stored elsewhere. If requested data is contained in the cache (cache hit), this request can be served by simply reading the cache, which is comparatively faster. Otherwise (cache miss), the data has to be recomputed or fetched from its original storage location, which is comparatively slower. Hence, the greater the number of requests that can be served from the cache, the faster the overall system performance becomes.</p><footer><strong>Cache (computing) <a href="http://en.wikipedia.org/wiki/Cache_">http://en.wikipedia.org/wiki/Cache_</a>(computing)</strong></footer></blockquote></p>

<p>So, caching is a technique to optimize the performance of a system by storing data in a fast storage. There is nothing difficult here: just take data from a slow data source and put it into a faster data source. The faster and bigger the cache is, the more performance gain we can receive. A question for self-test: how many types of cache do you know in PHP?</p>

<h3>Caching. Elementary.</h3>

<p>Imagine that you have a code in a service class that returns information about something:</p>

<pre><code class="php">class ImportantService
{
    /**
     * Returns information about object by its unique identifier
     *
     * @return object
     */
    public function getInformation($uniqueIdentifier)
    {
        return $this-&gt;dataSource-&gt;getOne($uniqueIdentifier);
    }
}
</code></pre>

<p>This service and method is pretty clear, but your boss has just discovered that it takes several seconds to query this information and asks you to fix this. What would you do in order to improve the performance of this method? Of course, the easiest way to do this is to write this data into cache and then just check if there is a record in our cache instead of making hard query to a busy data source server.</p>

<p>At elementary level we can do this easy with memcache extension:</p>

<pre><code class="php">class ImportantService
{
    private $cache = null;

    /**
     * Default constructor
     */
    public function __construct()
    {
        $this-&gt;cache = $memcache = new Memcache();
        $memcache-&gt;addServer('memcache.local');
    }


    /**
     * Returns information about object by its unique identifier
     *
     * @return object
     */
    public function getInformation($uniqueIdentifier)
    {
        $result = $this-&gt;cache-&gt;get($uniqueIdentifier);
        if ($result === false) {
            $result = $this-&gt;dataSource-&gt;getOne($uniqueIdentifier);
            $this-&gt;cache-&gt;set($uniqueIdentifier, $result);
        }

        return $result;
    }
}
</code></pre>

<p>Now we use cache and store results from original data source for future use. On a subsequent query with unique identifier we can take a result from cache and just return it instead of doing hard query. So this code will work faster and this should make your boss happier. However I should put here a warning for beginners not to write code like this. Be more experienced and write code better!</p>

<h3>Caching. Pre-Intermediate.</h3>

<p>What&rsquo;s wrong with the previous example with caching? Ok, there are two issues in it. Firstly, we don&rsquo;t use a <a href="http://en.wikipedia.org/wiki/Dependency_injection">Dependency Injection (DI)</a> to inject instance of cache and we hard-coded cache initialization in constructor. Secondly, we put logic of caching into the original service. This implementation violates <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle (SRP)</a> and can cause a lot of problems with testing, as we won&rsquo;t be able to query the information directly from a data source without caching. We may as well violate another principle - <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>. This may occur if there are several methods in the class that should be cached, and we write extra lines of code in each method:</p>

<pre><code class="php">
$result = $this-&gt;cache-&gt;get($uniqueIdentifier);
if ($result === false) {
    $result = ...
    $this-&gt;cache-&gt;set($uniqueIdentifier, $result);
}

return $result;
</code></pre>

<p>You can notice that we put the same lines of code everywhere where we need to add caching. This is known as cross-cutting concern. Caching is a typical example of it, and traditional object-oriented paradigm offers only few ways to extract this logic into one place. One of them is proxy pattern: define a class with magic <code>__call()</code> method and wrap an object with caching proxy:</p>

<pre><code class="php">class CachingProxy
{
    private $cache = null;
    private $instance = null;

    public function __construct(Memcache $cache, $instance)
    {
        $this-&gt;cache    = $cache;
        $this-&gt;instance = $instance;
    }

    public function __call($method, $arguments)
    {
        if (substr($method, 0, 3) !== 'get') {
            $result = call_user_func_array($method, $arguments);
        } else {
            $uniqueId = $method . serialize($arguments);
            $result = $this-&gt;cache-&gt;get($uniqueId);
            if ($result === false) {
                $result = call_user_func_array($method, $arguments);
                $this-&gt;cache-&gt;set($uniqueId, $result);
            }
        }

        return $result;
    }
}

$service = new ImportantService();
$cachedService = new CachingProxy($memcacheInstance, $service);

$result = $cachedService-&gt;getInformation(123); // First call goes to a data source
$more   = $cachedService-&gt;getInformation(123); // From cache now
</code></pre>

<p>Much better now! We extracted the logic of caching into a separate class and can wrap any instance. Our original service still has transparent logic and doesn&rsquo;t need any instance of cache to work. But this solution has another two issues. The first issue is that proxy slows down execution of each method due to magic <code>__call()</code> and slow <code>call_user_func_array()</code> function. The second issue is more serious. Proxy violates inheritance and <a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle (LSP)</a>. This means that we can&rsquo;t pass an instance of proxy everywhere where original class is expected:</p>

<pre><code class="php">function expectsImportantService(ImportantService $service) 
{
    return $service-&gt;getInformation(123);
}

$service = new ImportantService();
expectsImportantService($service); // OK

$cachedService = new CachingProxy($memcacheInstance, $service);
expectsImportantService($cachedService); // Catchable Fatal Error, expecting instance of ImportantService
</code></pre>

<p>This example shows that caching proxy is not a perfect solution because it is violating typehints and decreasing performance of application. However, it can be used to extract logic of caching into a single class and to keep original classes clean.</p>

<h3>Caching. Intermediate.</h3>

<p>At this level developers understand that caching logic should be separated from original code and LSP should be used. This is possible with decorator pattern, when caching class extends an original service class and overwrites methods to introduce an additional logic. Usually, it is done automatically with reflection and code generation.</p>

<pre><code class="php">
class CachedImportantService extends ImportantService
{
    private $cache = null;

    /**
     * Default constructor
     */
    public function __construct($cache)
    {
        $this-&gt;cache = $cache
        parent::__construct();
    }

    /**
     * Returns information about object by its unique identifier
     *
     * @return object
     */
    public function getInformation($uniqueIdentifier)
    {
        $result = $this-&gt;cache-&gt;get($uniqueIdentifier);
        if ($result === false) {
            $result = parent::getInformation($uniqueIdentifier); // call original parent method
            $this-&gt;cache-&gt;set($uniqueIdentifier, $result);
        }

        return $result;
    }
}
</code></pre>

<p>This solution requires a lot of code generation and it&rsquo;s still duplicated, because we need to override each method that should be cached with our implementation. It also requires to rewrite the source code or adjust definition of service to use an extended <code>CachedImportantService</code> instead of the original one. But we can use a framework for this, for example, there is a nice one <a href="https://github.com/Ocramius/ProxyManager">Ocramius/ProxyManager</a>.</p>

<p>Nevertheless, decorators and proxies can&rsquo;t be used for static methods. Imagine that we have <code>ImportantService::staticGetInformation()</code> method which is used somewhere in the source code:</p>

<pre><code class="php">class ImportantService
{
    /**
     * Returns information about object by its unique identifier
     *
     * @return object
     */
    public static function getInformation($uniqueIdentifier)
    {
        return self::$dataSource-&gt;getOne($uniqueIdentifier);
    }
}

function testStaticMethod()
{
    return ImportantService::getInformation(123); // no way to cache it or to replace with decorator/proxy
}
</code></pre>

<p>So, even advanced proxies can&rsquo;t help us extract caching logic for static methods into the proxy/decorator. They won&rsquo;t work for final classes either, because a final class can&rsquo;t be extended.</p>

<h3>Caching. Advanced</h3>

<p>In this article we compared all the possible ways to cache a result for method. Each of them has its own advantages and issues, because object-oriented paradigm doesn&rsquo;t have any instruments for solving cross-cutting problems. Is there a way to get rid of them? We want to achieve the following things:</p>

<ul>
<li>extract logic of caching into a single class (like with Proxy pattern)</li>
<li>use Liskov Substitution and Open-Closed Principles</li>
<li>have an ability to cache static methods and methods in a final class.</li>
</ul>


<p>Now you are ready for aspect-oriented paradigm. AOP was designed to solve such cross-cutting issues in an elegant way with advices, aspects and joinpoints. It performs weaving of custom logic into original methods without changing the source code. Caching logic that we extracted for proxy earlier in the article is a typical body of advice in AOP. Our manual check for methods starting with &ldquo;get&rdquo; is a definition of pointcut in AOP terms. With AOP we can implement caching as follows:</p>

<ul>
<li>intercepting execution of static and dynamic methods declared as &ldquo;cacheable&rdquo; in all classes,</li>
<li>adding an extra check for presence of value in the cache before executing the original method,</li>
<li>if there isn&rsquo;t any value in the cache, we invoke an original method and store its result in the cache.</li>
</ul>


<p>My preferred way to declare method as &ldquo;cacheable&rdquo; is to use an annotation.</p>

<pre><code class="php">use Annotation\Cacheable;

class ImportantService
{
    /**
     * Returns information about object by its unique identifier
     * @Cacheable
     *
     * @return object
     */
    public function getInformation($uniqueIdentifier)
    {
        return $this-&gt;dataSource-&gt;getOne($uniqueIdentifier);
    }
}
</code></pre>

<p>Then we just need to define an aspect for caching, that will intercept all methods with <code>Cacheable</code> annotation:</p>

<pre><code class="php">use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\Around;

/**
 * Caching aspect
 */
class CachingAspect implements Aspect
{
    private $cache = null;

    public function __construct(Memcache $cache)
    {
        $this-&gt;cache = $cache;
    }

    /**
     * This advice intercepts the execution of cacheable methods
     *
     * The logic is pretty simple: we look for the value in the cache and if we have a cache miss
     * we then invoke original method and store its result in the cache.
     *
     * @param MethodInvocation $invocation Invocation
     *
     * @Around("@annotation(Annotation\Cacheable)")
     */
    public function aroundCacheable(MethodInvocation $invocation)
    {
        $obj   = $invocation-&gt;getThis();
        $class = is_object($obj) ? get_class($obj) : $obj;
        $key   = $class . ':' . $invocation-&gt;getMethod()-&gt;name;

        $result = $this-&gt;cache-&gt;get($key);
        if ($result === false) {
            $result = $invocation-&gt;proceed();
            $this-&gt;cache-&gt;set($key, $result);
        }

        return $result;
    }
}
</code></pre>

<p>This aspect then will be registered in the AOP kernel. AOP engine will analyze each loaded class during autoloading and if a method matches the <code>@Around("@annotation(Annotation\Cacheable)")</code> pointcut then AOP will change it on the fly to include a custom logic of invoking an advice. Class name will be preserved, so AOP can easily cache static methods and even methods in final classes.</p>

<p>AOP allows us to extract caching logic into a single method (called &lsquo;advice&rsquo;), it works like a decorator, so we don&rsquo;t slow down methods that are not cached (compared with proxy pattern), moreover, it doesn&rsquo;t repeat the code several times (DRY) and it&rsquo;s an awesome result.</p>

<p>Many developers have doubts about AOP, annotations and pointcut matching ) It&rsquo;s a typical question, so I want to make some clarifications. First of all, pointcut matching is performed only once, there won&rsquo;t be any extra checks during a normal execution of an application. Modified classes are stored in the cache and are friendly for opcode cachers, this means that the performance will be good. Annotations are parsed only once during pointcut matching and are also cached (in case you want to read some values from an annotation inside an advice). Bootstrap time for framework is about 20ms, this should be fast enough for your typical applications.</p>

<p>Assuming that we use AOP for caching of methods which can take several hundreds ms or even up to several seconds to complete, AOP overhead is minimal (20ms bootstrap and several ms for calling an advice). This approach gives a new instrument for developers, it can solve annoying cross-cutting concerns, like caching with simple aspect. Use it! Enjoy It!</p>

<p>PS. There is a demo site on Heroku with caching example: <a href="http://demo.aopphp.com/?showcase=cacheable">http://demo.aopphp.com/?showcase=cacheable</a> You can try it with enabled/disabled AOP (blue button at top).</p>

<p>PSS. If you&rsquo;re looking for a way to use AOP caching with Laravel, visit an article (Spain): <a href="http://blog.carlosgoce.com/realizando-cache-con-aop-en-laravel-4/">http://blog.carlosgoce.com/realizando-cache-con-aop-en-laravel-4/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspect-Oriented programming with Yii]]></title>
    <link href="http://go.aopphp.com/blog/2013/09/28/aspect-oriented-programming-with-yii/"/>
    <updated>2013-09-28T16:28:00+03:00</updated>
    <id>http://go.aopphp.com/blog/2013/09/28/aspect-oriented-programming-with-yii</id>
    <content type="html"><![CDATA[<p>Aspect-Oriented programming becomes more popular for PHP, but it requires good knowledge of OOP and can be very cumbersome for beginners. So it&rsquo;s important to have a working examples and manuals to have a possibility to run it locally with favorite framework. Go! AOP provides all the necessary functionality for configuration of AOP into any frameworks, but integration process can be very tricky, so configuration is not so easy. In this article we will configure a working example for Yii framework.</p>

<!-- more -->


<p>Let&rsquo;s start! First of all, we need an empty <code>yii-aspect</code> directory for our project:</p>

<pre><code class="bash">mkdir yii-aspect &amp;&amp; cd yii-aspect
</code></pre>

<p>Next step is to install dependencies: Yii and Go! AOP frameworks. Go! AOP is registered on packagist and can be easily installed with composer:
<code>bash
composer require lisachenko/go-aop-php:0.4.*
</code>
Latest version of Yii framework (1.1.14) is on <a href="https://packagist.org/packages/yiisoft/yii">packagist</a> too! This means that we can install it without any hacks with local repositories:
<code>bash
composer require yiisoft/yii:1.1.*
</code></p>

<p>This is a minimum list of dependencies for our first example. Following step is very easy, thanks to the <code>yiic</code> console command. By default, all binaries are installed into <code>./vendor/bin</code> folder, so <code>yiic</code> console should be there too.</p>

<p>Let&rsquo;s create a web application:
<code>bash
yiic webapp app
</code>
Yii will generate a directory <code>app</code> with default project structure and files. This project can be opened in the browser, but AOP isn&rsquo;t enabled right now. To enable AOP we should prepare our application to have an ability to use it. To enable AOP we need to update the front controller of our application (<code>./app/index.php</code>) in the following way:</p>

<p>Add this lines to the top of file before original content:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Go\Instrument\Transformer\FilterInjectorTransformer</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span> <span class="nx">Load</span> <span class="nx">the</span> <span class="nx">composer</span> <span class="nx">autoloader</span>
</span><span class='line'><span class="k">include</span> <span class="o">&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="nx">DIR</span><span class="o">&lt;/</span><span class="nx">strong</span><span class="o">&gt;</span> <span class="o">.</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/../</span><span class="nx">vendor</span><span class="o">/</span><span class="nx">autoload</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span> <span class="nx">Load</span> <span class="nx">AOP</span> <span class="nx">kernel</span>
</span><span class='line'><span class="k">include</span> <span class="o">&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="nx">DIR</span><span class="o">&lt;/</span><span class="nx">strong</span><span class="o">&gt;</span> <span class="o">.</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">/</span><span class="nx">aspect</span><span class="o">.</span><span class="nx">php</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And replace initialization of Yii at the bottom of file from <code>require_once($yii)</code> to <code>require_once(FilterInjectorTransformer::rewrite($yii))</code>. This is needed to give a hook for the Go! AOP framework to weave aspects into classes. Aspects are defined as separated classes and included in the <code>./aspect.php</code> file. Let&rsquo;s move to it and to the aspect kernel</p>

<pre><code class="php">
include __DIR__ . '/protected/extensions/go-aop-php/ApplicationAspectKernel.php';

// Prevent an error about nesting level
ini_set('xdebug.max_nesting_level', 500);

// Initialize an application aspect container
$applicationAspectKernel = ApplicationAspectKernel::getInstance();
$applicationAspectKernel-&gt;init(array(
    'debug' =&gt; true,
    // Application root directory
    'appDir'   =&gt; __DIR__ . '/../',
    // Cache directory
    'cacheDir' =&gt; __DIR__ . './protected/aspect',
    'excludePaths' =&gt; array(
        __DIR__ . './protected/aspect'
    )
));
</code></pre>

<p>This is typical configuration of Go! AOP framework where we can adjust some directories and paths. I think that this config is pretty clear to understand. Only <code>debug</code> parameter is really important. For production mode it should be <code>false</code>, but for development mode it should be enabled to enable better debugging and cache refreshing.</p>

<p>In this file we also include a strange file <code>ApplicationAspectKernel.php</code>. This file contains definition of aspect kernel for our application and it&rsquo;s very simple:</p>

<pre><code class="php">
use Go\Core\AspectKernel;
use Go\Core\AspectContainer;

/**
 * Application Aspect Kernel
 */
class ApplicationAspectKernel extends AspectKernel
{

    /**
     * Configure an AspectContainer with advisors, aspects and pointcuts
     *
     * @param AspectContainer $container
     *
     * @return void
     */
    protected function configureAop(AspectContainer $container)
    {
        // todo: register aspects, advisors, pointcuts, etc
    }
}
</code></pre>

<p>There is only one method to define: <code>configureAop</code> that is used for AOP configuration. We can create an aspect now and register it in the kernel:</p>

<pre><code class="php">&lt;?php
// app/protected/extensions/go-aop-php/TestMonitorAspect.php

namespace Aspect;

use Go\Aop\Aspect;
use Go\Aop\Intercept\FieldAccess;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;
use Go\Lang\Annotation\Pointcut;

/**
 * Monitor aspect
 */
class TestMonitorAspect implements Aspect
{

    /**
     * Method that will be called before real method
     *
     * @param MethodInvocation $invocation Invocation
     * @Before("within(**)")
     */
    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $obj = $invocation-&gt;getThis();
        echo 'Calling Before Interceptor for method: ',
        is_object($obj) ? get_class($obj) : $obj,
        $invocation-&gt;getMethod()-&gt;isStatic() ? '::' : '-&gt;',
        $invocation-&gt;getMethod()-&gt;getName(),
        '()',
        ' with arguments: ',
        json_encode($invocation-&gt;getArguments()),
        "&lt;br&gt;\n";
    }
}
</code></pre>

<p>&hellip; and registration in the kernel:</p>

<pre><code class="php">&lt;?php
// app/protected/extensions/go-aop-php/ApplicationAspectKernel.php

require_once 'TestMonitorAspect.php';

use Aspect\TestMonitorAspect;
use Go\Core\AspectKernel;
use Go\Core\AspectContainer;

/**
 * Application Aspect Kernel
 */
class ApplicationAspectKernel extends AspectKernel
{

    /**
     * Configure an AspectContainer with advisors, aspects and pointcuts
     *
     * @param AspectContainer $container
     *
     * @return void
     */
    protected function configureAop(AspectContainer $container)
    {
        $container-&gt;registerAspect(new TestMonitorAspect());
    }
}
</code></pre>

<p>That&rsquo;s all )</p>

<blockquote class="twitter-tweet" data-conversation="none"><p>Just have recreated <a href="https://t.co/FqlECETHO7">https://t.co/FqlECETHO7</a> to use latest <a href="https://twitter.com/search?q=%23yii&amp;src=hash">#yii</a> 1.1.x and Go! AOP with <a href="https://twitter.com/search?q=%23composer&amp;src=hash">#composer</a> /cc <a href="https://twitter.com/afdiaz">@afdiaz</a> <a href="https://twitter.com/sam_dark">@sam_dark</a></p>&mdash; Alexander Lisachenko (@lisachenko) <a href="https://twitter.com/lisachenko/statuses/383317369872855040">September 26, 2013</a></blockquote>


<p>Just refresh the page in the browser to see a result. All methods will be intercepted by our advice <code>beforeMethodExecution</code>:</p>

<p><img src="/images/yii-aop.png" title="&lsquo;Yii with Go! AOP framework&rsquo; &lsquo;Yii methods interception&rsquo;" ></p>

<p>PS. If you want to create an empty project with single line you can run:</p>

<pre><code class="bash">composer create-project lisachenko/yii-aspect --prefer-source --stability=dev
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing logging aspect with Doctrine annotations]]></title>
    <link href="http://go.aopphp.com/blog/2013/07/21/implementing-logging-aspect-with-doctrine-annotations/"/>
    <updated>2013-07-21T22:38:00+03:00</updated>
    <id>http://go.aopphp.com/blog/2013/07/21/implementing-logging-aspect-with-doctrine-annotations</id>
    <content type="html"><![CDATA[<p>Logging is probably the most mentioned sweet example of AOP. Probably because it is the simplest and most straightforward example most people can think of. So I want to show you the easiest ever way to implement logging in PHP with annotations. This article is the second part of my previous article about <a href="/blog/2013/06/02/application-level-logging-with-aop-and-monolog/">application-level logging with AOP in PHP</a> and if you haven&rsquo;t read it yet please do this before proceeding to this article.</p>

<!-- more -->


<p>It&rsquo;s not a secret that every business application requires logging of different actions in different places of the code. Why we need this logging? Is it possible not to use it? The answer is obvious. No, we can&rsquo;t, we should write logs to be able to analyze them in case something goes wrong. Logs can give us the answers: what happened, when it happened and why it happened.</p>

<p>Let&rsquo;s have a look at a typical class which is doing some important job for us:</p>

<pre><code class="php">class Account
{
    protected $amount = 0;

    public function depositMoney($amount)
    {
        $this-&gt;amount += $amount;
    }

    public function withdrawMoney($amount)
    {
        $this-&gt;amount -= $amount;
    }
}
</code></pre>

<p>Of course, it&rsquo;s the simplest implementation and real class can contain much more lines of code. Suppose that we deployed this code to the production server and after a while our project manager says that sometimes deposit withdrawal is not working. Oops!</p>

<p>Best solution in that case is to add logging to all the important methods to be sure that everything is working as expected. To detect an error we should write log before and after method execution. Then we can look into log and just count pairs &ldquo;before-after&rdquo;. If there isn&rsquo;t &ldquo;after&rdquo; log record then we have an error and corresponding &ldquo;before&rdquo; record will give us an idea why we have this error.</p>

<p>To write the logs we need a logger instance in our class and it&rsquo;s another disadvantage of OOP version of logging. Injecting logger adds a dependency which is not really needed by our class:</p>

<pre><code class="php">class Account
{
    /**
     * @var LoggerInterface
     */
    protected $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this-&gt;logger = $logger;
    }

    // source code here
}
</code></pre>

<p>Cross-cutting concerns such as logging can not be easily extracting on OOP level into the single class and this means that we should add logging to each method:</p>

<pre><code class="php">class Account
{
    protected $amount = 0;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this-&gt;logger = $logger;
    }

    public function depositMoney($amount)
    {
        $this-&gt;logger-&gt;info("Preparing to deposit money", array('amount' =&gt; $amount));
        try {
            $this-&gt;amount += $amount;
            $this-&gt;logger-&gt;info("Deposit money successful", array('amount' =&gt; $amount));
        } catch (Exception $e) {
            $this-&gt;logger-&gt;info("Deposit money error: " . $e, array('amount' =&gt; $amount));
            throw $e;
        }
    }

    public function withdrawMoney($amount)
    {
        $this-&gt;logger-&gt;info("Preparing to withdraw money", array('amount' =&gt; $amount));
        try {
            $this-&gt;amount -= $amount;
            $this-&gt;logger-&gt;info("Withdraw money successful", array('amount' =&gt; $amount));
        } catch (Exception $e) {
            $this-&gt;logger-&gt;info("Withdraw money error: " . $e, array('amount' =&gt; $amount));
            throw $e;
        }
    }
}
</code></pre>

<p>Wow! Logging is so annoying! Instead of single line of useful code we have 6! For each important method! In my previous article we refactored logging to the aspect class:</p>

<pre><code class="php">use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;

class LoggingAspect implements Aspect
{
    /**
     * Instance of logger (injected in constructor or by setter)
     */
    protected $logger;

    /**
     * @Before("within(**)")
     */
    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $this-&gt;logger-&gt;info(
            "Executing " . $invocation-&gt;getMethod()-&gt;name,
            $invocation-&gt;getArguments()
        );
    }
}
</code></pre>

<p>This aspect is cool but it is too global due to the <code>within(**)</code> pointcut that matches all public and protected methods in every class. But what should we do if we want to log only specific methods in the application? We definitely need some markers for loggable methods. In the Java world we can use native annotations to mark the methods, but for PHP there isn&rsquo;t native support for annotations. However, there is a cool <a href="http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html">Doctrine Annotations</a> library that can be used in our own application to implement doc block annotations.</p>

<p>Let&rsquo;s create an annotation class for @Loggable marker:</p>

<pre><code class="php">namespace Annotation;

use Doctrine\Common\Annotations\Annotation;

/**
 * Loggable marker
 *
 * @Annotation
 */
class Loggable extends Annotation
{

}
</code></pre>

<p>The next step is to register this annotation in the registry of Doctrine (this is only needed if you did not register an autoloader previously):</p>

<pre><code class="php">use Doctrine\Common\Annotations\AnnotationRegistry;

AnnotationRegistry::registerFile(__DIR__ . './Annotation/Loggable.php');
</code></pre>

<p>Now we can modify an aspect by writing a pointcut expression that will match only specific methods. A pointcut expression is an expression that specifies where in the code the advice will be applied. With Go! AOP, you can create a pointcut by specifying namespace, class and method attributes among other things. But the easiest way to specify a pointcut for the logging aspect is by matching methods that have a specific <code>Annotation\Loggable</code> annotation marker in the phpDoc-block</p>

<pre><code class="php">use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\Around;
use Go\Lang\Annotation\Pointcut;

class LoggingAspect implements Aspect
{
    /**
     * Instance of logger (injected in constructor or by setter)
     */
    protected $logger;

    /**
     * @Pointcut("@annotation(Annotation\Loggable)")
     */
    protected function loggablePointcut() {}

    /**
     * @Around("$this-&gt;loggablePointcut")
     * @return mixed
     */
    public function aroundLoggable(MethodInvocation $invocation)
    {
        $method = $invocation-&gt;getMethod()-&gt;name;
        $this-&gt;logger-&gt;info("Entering " . $method, $invocation-&gt;getArguments());
        try {
            $result = $invocation-&gt;proceed();
            $this-&gt;logger-&gt;info("Success: " . $method);
        } catch (Exception $e) {
            $this-&gt;logger-&gt;error("Error: " . $method . ' details: ' . $e);
            throw $e;
        }
        return $result;
    }
}
</code></pre>

<p>Using the annotation means that developers never need to alter the pointcut expression to add or remove methods to the pointcut. A developer only has to add the annotation to a method to have the logging aspect applied. Let&rsquo;s refactor our original class to use only annotation for loggable methods:</p>

<pre><code class="php">
use Annotation\Loggable;

class Account
{
    protected $amount = 0;

    /**
     * @var LoggerInterface
     */
    protected $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this-&gt;logger = $logger;
    }

    /**
     * @Loggable
     */
    public function depositMoney($amount)
    {
        $this-&gt;amount += $amount;
    }

    /**
     * @Loggable
     */
    public function withdrawMoney($amount)
    {
        $this-&gt;amount -= $amount;
    }
}
</code></pre>

<p>We can also remove logger dependency, as there is no need in it any more:</p>

<pre><code class="php">
use Annotation\Loggable;

class Account
{
    protected $amount = 0;

    /**
     * @Loggable
     */
    public function depositMoney($amount)
    {
        $this-&gt;amount += $amount;
    }

    /**
     * @Loggable
     */
    public function withdrawMoney($amount)
    {
        $this-&gt;amount -= $amount;
    }
}
</code></pre>

<p>We just finished our refactoring to use transparent logging with Go! AOP and Doctrine annotations. By having <code>@Loggable</code> marker we still have a good understanding that this method should be logged and have a nice aspect that do logging in one place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Application-level logging with AOP and Monolog]]></title>
    <link href="http://go.aopphp.com/blog/2013/06/02/application-level-logging-with-aop-and-monolog/"/>
    <updated>2013-06-02T13:50:00+03:00</updated>
    <id>http://go.aopphp.com/blog/2013/06/02/application-level-logging-with-aop-and-monolog</id>
    <content type="html"><![CDATA[<p>So you got finished with your brand new website. It is completely PHP driven and looks very nice. But are you sure that
everything works perfectly? Under every circumstances?</p>

<p>No. You can never be absolutely sure. That is why you need a log file to see if there where some errors. Well, if you
are the kind of person that doesn’t care if some jerks who behaved wrong on you website get error messages, then you
probably don’t need an error log file.</p>

<!-- more -->


<p>If you decide to to write the logs, then you definitely choose the best tool for this - <a href="https://github.com/Seldaek/monolog">Monolog</a>.
Monolog is used by such frameworks as Symfony2, Silex, Laravel4, PPI and can be easily integrated into custom application.</p>

<p>But even such a great tool like Monolog can not help us with encapsulating the logging into separate class, because
logging is a <a href="http://en.wikipedia.org/wiki/Cross-cutting_concern">cross-cutting concern</a>. This means that logging do not
fit cleanly into object-oriented programming. As a result, the code addressing the logging must be scattered, or duplicated,
across the various related locations, resulting in a loss of modularity.</p>

<p>Aspect-oriented programming aims to encapsulate cross-cutting concerns into aspects to retain modularity.
This allows for the clean isolation and reuse of code addressing the cross-cutting concern. By basing designs on
cross-cutting concerns, software engineering benefits are effected, including modularity and simplified maintenance.
This article will show you how to combine the power of AOP with the ease of use of Monolog to implement application-level
 logging just in few lines.</p>

<h3>Installation</h3>

<p>First of all, we need to install Monolog (if it isn&rsquo;t available). Monolog is available on Packagist (monolog/monolog)
and as such installable via Composer:</p>

<pre><code class="bash">$ composer require monolog/monolog
</code></pre>

<p>If you do not use Composer, you can grab the code of Monolog from GitHub, and use any PSR-0 compatible autoloader
(e.g. the Symfony2 ClassLoader component) to load Monolog classes.</p>

<p>Next tool that we need is <a href="http://go.aopphp.com">Go! Aspect-Oriented Framework</a>. You can find more information about installation
and configuration in the <a href="/docs/">documentation</a> section.</p>

<p>If you use a Composer, then installation is quite easy:</p>

<pre><code class="bash">$ composer require lisachenko/go-aop-php
</code></pre>

<p>Small configuration is required to prepare the AOP kernel for work. Detailed instructions are
available <a href="/docs/initial-configuration/">here</a>. After installation and configuration we are ready for the dark power of
AOP</p>

<h3>Implementing logging aspect</h3>

<p>So, what is aspect?</p>

<p><blockquote><p>In computer science, an aspect of a program is a feature linked to many other parts of the program, but which is not related to the program&rsquo;s primary function.</p></blockquote></p>

<p>Go! framework defines an aspect as a typical class with methods-advices. Each advice contains a specific logic that can be
invoked before, after or around specific part of code in your application. Let&rsquo;s try to describe an advice for logging.</p>

<p>Suppose, that we want to log an execution of methods. We want to write a method name and an arguments before execution of a method.
Typically this is looking like this:</p>

<pre><code class="php">&lt;?php
class Example
{
    /**
     * Instance of logger (injected in constructor or by setter)
     */
    protected $logger;

    public function test($arg1, $arg2)
    {
        $this-&gt;logger-&gt;info("Executing " . __METHOD__, func_get_args());
        // ... logic of method here
    }

    public function anotherTest($arg1)
    {
        $this-&gt;logger-&gt;info("Executing " . __METHOD__, func_get_args());
        // ... logic of method here
    }
}
</code></pre>

<p>We can notice that the code addressing the logging is scattered and duplicated. To solve this issue we can extract this code into the separate &ldquo;before&rdquo; advice:</p>

<pre><code class="php">&lt;?php
use Go\Aop\Aspect;

class LoggingAspect implements Aspect
{
    /**
     * Instance of logger (injected in constructor or by setter)
     */
    protected $logger;

    public function beforeMethodExecution()
    {
        $this-&gt;logger-&gt;info("Executing " . __METHOD__, func_get_args());
        // return the control to original code
    }
}
</code></pre>

<p>Ok, we have extracted the advice itself, but how we get a method name and arguments? Go! framework contains a specific class, that implements <code>MethodInvocation</code> interface. This interface gives an information about joinpoint by providing an access to the reflection object. Each advice is receiving an instance of this class as an argument:</p>

<pre><code class="php">&lt;?php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;

class LoggingAspect implements Aspect
{
    /**
     * Instance of logger (injected in constructor or by setter)
     */
    protected $logger;

    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $this-&gt;logger-&gt;info("Executing " . $invocation-&gt;getMethod()-&gt;name, $invocation-&gt;getArguments());
    }
}
</code></pre>

<p>There is one more question to solve: &ldquo;how to specify concrete methods?&rdquo;. This is known as a pointcut - the term given to the point of execution in the application at which cross-cutting concern needs to be applied.</p>

<p>Go! framework uses annotations for defining pointcuts. Pointcut syntax is like an SQL for the source code. To intercept each public and protected method in the class we can use &ldquo;within&rdquo; pointcut:</p>

<pre><code class="php">&lt;?php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;

class LoggingAspect implements Aspect
{
    /**
     * Instance of logger (injected in constructor or by setter)
     */
    protected $logger;

    /**
     * @Before("within(**)")
     */
    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $this-&gt;logger-&gt;info("Executing " . $invocation-&gt;getMethod()-&gt;name, $invocation-&gt;getArguments());
    }
}
</code></pre>

<p>Pointcut syntax allows many constructions, for example: &ldquo;within(My\Super\Class)&rdquo;, &ldquo;execution(public ClassName-><em>(</em>))&rdquo;, &ldquo;@annotation(Annotation\Class\Name)&rdquo; and more. You can play with pointcuts to look at result )</p>

<p>To register the aspect just add an instance of it in the <code>configureAop()</code> method of the kernel:</p>

<pre><code class="php">&lt;?php
// app/ApplicationAspectKernel.php

use LoggingAspect;

//...

    protected function configureAop(AspectContainer $container)
    {
        $container-&gt;registerAspect(new LoggingAspect());
    }

//...
</code></pre>

<p>If you don&rsquo;t know how to inject a logger, you can try to initialize it in the aspect constructor:</p>

<pre><code class="php">&lt;?php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;

use Monolog;

/**
 * Logging aspect
 */
class LoggingAspect implements Aspect
{
    protected $logger;

    public function __construct()
    {
        $this-&gt;logger = new Monolog\Logger('test');
        $this-&gt;logger-&gt;pushHandler(new Monolog\Handler\StreamHandler('php://output'));
    }

    /**
     * @Before("within(**)")
     */
    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $obj   = $invocation-&gt;getThis();
        $class = $obj === (object)$obj ? get_class($obj) : $obj;
        $this-&gt;logger-&gt;info("Executing " . $class.'-&gt;'.$invocation-&gt;getMethod()-&gt;name, $invocation-&gt;getArguments());
    }
}
</code></pre>

<p>If you run an application you can get an output like this (example for a Go! <a href="https://github.com/lisachenko/go-aop-php/blob/master/demos/life.php">demo</a>):
<code>
Want to eat something, let's have a breakfast!&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;eat [] []
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;washUp [] []
Washing up...&lt;br&gt;
Eating...&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;cleanTeeth [] []
Cleaning teeth...&lt;br&gt;
I should work to earn some money&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;work [] []
Working...&lt;br&gt;
It was a nice day, go to bed&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;cleanTeeth [] []
Cleaning teeth...&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\Human-&gt;sleep [] []
Go to sleep...&lt;br&gt;
[2013-06-02 11:50:14] test.INFO: Executing Example\User-&gt;setName ["test"] []
[2013-06-02 11:50:14] test.INFO: Executing Example\User-&gt;setSurname ["a"] []
[2013-06-02 11:50:14] test.INFO: Executing Example\User-&gt;setPassword ["root"] []
</code></p>

<p>So, we have implemented logging without changes in the original source code! Have a nice experiments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing reusable fluent interface pattern in PHP with AOP]]></title>
    <link href="http://go.aopphp.com/blog/2013/03/19/implementing-fluent-interface-pattern-in-php/"/>
    <updated>2013-03-19T22:44:00+03:00</updated>
    <id>http://go.aopphp.com/blog/2013/03/19/implementing-fluent-interface-pattern-in-php</id>
    <content type="html"><![CDATA[<p>During software development one of the most important goals is the readability of source code. There are special
techniques and tips that help us to improve the readability of source code. One of the techniques of improving the
source code readability is using of fluent interfaces. Let&rsquo;s discuss it in this article.</p>

<!-- more -->


<h3>Evolution. From simple to complex.</h3>

<p>Every programmer starts with the language by writing a trivial &ldquo;Hello, world!&rdquo;. After that, it takes several years to
learn the language and to make clumsy attempts to write his own ORM / CMS / Framework (underline one or several). I
think that everyone has the code which is better to hide. But without understanding of simple things you will not be
able to understand the complex ones, so let&rsquo;s start with a simple example and get to the implementation of the &ldquo;fluent&rdquo;
interface as a separate class using AOP. Those who know this pattern can safely move on to the last part of the article,
where you can get excellent food for thoughts.</p>

<p>Let&rsquo;s start!</p>

<p>Let&rsquo;s take a simple user entity, which has the following properties: name, last name and the password:</p>

<pre><code class="php">&lt;?php
class User
{
    public $name;
    public $surname;
    public $password;
}
</code></pre>

<p>An excellent class that is easy to use:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">John</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">surname</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Doe</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">password</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It is easy to notice that we have no validation and somebody can set a blank password, which is not very good. In
addition, it would be nice to know that the field values are immutable. These several considerations lead us to the
idea that properties should be protected or private and access to them should be carried out with a pair of getter / setter.</p>

<p>Suit the action to the word:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$surname</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$password</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">setName</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setSurname</span><span class="p">(</span><span class="nv">$surname</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">surname</span> <span class="o">=</span> <span class="nv">$surname</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setPassword</span><span class="p">(</span><span class="nv">$password</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">InvalidArgumentException</span><span class="p">(</span><span class="s2">&quot;Password shouldn&#39;t be empty&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">password</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">For</span> <span class="nx">the</span> <span class="k">new</span> <span class="k">class</span> <span class="nc">the</span> <span class="nx">configuration</span> <span class="nx">has</span> <span class="nx">changed</span> <span class="nx">a</span> <span class="nx">little</span> <span class="k">and</span> <span class="nx">now</span> <span class="nx">we</span> <span class="nx">are</span> <span class="nx">using</span> <span class="nx">setters</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">php</span>
</span><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">John</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">setSurname</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Doe</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">setPassword</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">root</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Not a big deal, right? But what if we need to set up 20 properties? 30 properties? This code will be flooded with setter
calls and $user variable references. If the variable name will be $superImportantUser then readability of the source
code deteriorates further. What can be done to get rid of the copy of the code?</p>

<h3>Fluent interface to the rescue!</h3>

<p>So, we came to the Fluent Interface pattern, which was coined by Eric Evans and Martin Fowler to increase readability of
source code by simplifying multiple calls to the same object. It is implemented by a chain of methods, transmitting the
calling context to the following method in the chain. The context is the return value of the method and this value can
be any object, including the current one.</p>

<p>To implement a fluent interface, we need all the methods-setters to return the current object:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$surname</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$password</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">setName</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setSurname</span><span class="p">(</span><span class="nv">$surname</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">surname</span> <span class="o">=</span> <span class="nv">$surname</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setPassword</span><span class="p">(</span><span class="nv">$password</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">InvalidArgumentException</span><span class="p">(</span><span class="s2">&quot;Password shouldn&#39;t be empty&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">password</span> <span class="o">=</span> <span class="nv">$password</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
This approach will allow us to make the call chain:</p>

<pre><code class="php">&lt;?php
$user = new User;
$user-&gt;setName('John')-&gt;setSurname('Doe')-&gt;setPassword('root');
</code></pre>

<p>As you can see, the configuration of the object now takes up less space and is much easier to read. We achieved our
goal! At this point, many developers will ask: &ldquo;So what?&rdquo; Ok, then try to answer the question: &ldquo;What&rsquo;s wrong with fluent
interface in this way?&rdquo; before reading the next section.</p>

<h3>So what&rsquo;s bad in it?</h3>

<p>Perhaps you&rsquo;ve failed to find an answer and you&rsquo;ve decided to read further? ) Well, I can reassure you that it&rsquo;s all
fine with fluent interface in OOP. However, if you think about it, you can find out that it can&rsquo;t be implemented as a
separate class, interface or trait. So it can&rsquo;t be reused. This results in the fact that we have to put down &ldquo;return
$this&rdquo; at the end of each method to implement fluent interface. If we have a couple dozen classes with a couple dozen
methods that we want to do &ldquo;fluent&rdquo; then we have to manually deal with this unpleasant operation.
This is the classic crosscutting.</p>

<h3>Let&rsquo;s make it in a separate class</h3>

<p>Since we have a crosscutting, we must rise to the level above OOP to describe this pattern. Specification is pretty
simple: when calling public methods in a class, original object should be returned as the result of the method
invocation. Of course, we do not want unexpected effects, so let&rsquo;s be clear: methods should be public setters starting
with &ldquo;set&rdquo; and they should be inside classes that implement FluentInterface marker only . Let&rsquo;s describe this with AOP
and Go! AOP library.</p>

<p>First of all, our marker interface:</p>

<pre><code class="php">&lt;?php
/**
 * Fluent interface marker
 */
interface FluentInterface
{

}
</code></pre>

<p>Fluent interface implementation in the form of advice within aspect:</p>

<pre><code class="php">&lt;?php
use Go\Aop\Aspect;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\Around;

class FluentInterfaceAspect implements Aspect
{
    /**
     * Fluent interface advice
     *
     * @Around("within(FluentInterface+) &amp;&amp; execution(public **-&gt;set*(*))")
     *
     * @param MethodInvocation $invocation
     * @return mixed|null|object
     */
    protected function aroundMethodExecution(MethodInvocation $invocation)
    {
        $result = $invocation-&gt;proceed();
        return $result!==null ? $result : $invocation-&gt;getThis();
    }
}
</code></pre>

<p>Just a quick explanation - &ldquo;Around&rdquo; advice sets the hook &ldquo;around&rdquo; the original method and is fully responsible for
whether the original method will be called or not, and is responsible for the result that will be returned. In the
advice, we call original method (setter invocation) and if it doesn&rsquo;t return anything we just return the original
object $invocation->getThis(). That is all ) That is a useful pattern implementation just in a few lines of code. Using
the fluent interface is now easy and sexy :)</p>

<pre><code class="php">&lt;?php
class User implements FluentInterface
{
    protected $name;
    protected $surname;
    protected $password;

    public function setName($name)
    {
        $this-&gt;name = $name;
    }

    public function setSurname($surname)
    {
        $this-&gt;surname = $surname;
    }

    public function setPassword($password)
    {
        if (!$password) {
            throw new InvalidArgumentException("Password shouldn't be empty");
        }
        $this-&gt;password = $password;
    }
}
</code></pre>

<p>And usage:</p>

<pre><code class="php">&lt;?php
$user = new User;
$user-&gt;setName('John')-&gt;setSurname('Doe')-&gt;setPassword('root');
</code></pre>

<p>No more copying &ldquo;return $this&rdquo; for hundreds of methods, only pure source code, intuitive FluentInterface and
implementation of FluentInterface in the form of a simple aspect.</p>
]]></content>
  </entry>
  
</feed>
